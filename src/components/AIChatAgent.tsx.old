import * as React from 'react';
import { useState, useRef, useEffect } from 'react';
import { MessageCircle, X, Send, Bot, User, ExternalLink, Mail, Expand, Minimize, Download, Sparkles, Brain, Lightbulb, BookOpen, Code, Palette, Target } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Link } from 'react-router-dom';
import { ScrollArea } from '@/components/ui/scroll-area';

interface Message {
  id: string;
  content: string;
  sender: 'ai' | 'user';
  timestamp: Date;
  hasActions?: boolean;
  type?: string;
}

export default function AIChatAgent() {
  const [isOpen, setIsOpen] = React.useState(false);
  const [isExpanded, setIsExpanded] = React.useState(false);
  const [messages, setMessages] = React.useState<Message[]>([{
    id: '1',
    content: "ðŸ‘‹ Hi! I'm your enhanced AI portfolio assistant. I can provide detailed insights about projects, analyze design patterns, suggest improvements, and help you navigate the portfolio. What would you like to explore?",
    sender: 'ai',
    timestamp: new Date(),
    hasActions: true,
  }]);
  const [inputValue, setInputValue] = React.useState('');
  const [isTyping, setIsTyping] = React.useState(false);
  const messagesEndRef = React.useRef(null);
  const scrollAreaRef = React.useRef(null);

  const handleSendMessage = (customMessage?: string) => {
    const messageText = customMessage || inputValue;
    if (!messageText.trim()) return;

    // Add user message
    const userMessage: Message = {
      id: Date.now().toString(),
      content: messageText,
      sender: 'user',
      timestamp: new Date(),
      hasActions: false
    };

    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setIsTyping(true);

    // Simulate AI response with typing delay
    setTimeout(() => {
      const response = generateAIResponse(messageText);
      const aiMessage: Message = {
        id: (Date.now() + 1).toString(),
        content: response.content,
        sender: 'ai',
        timestamp: new Date(),
        hasActions: response.hasActions,
        type: response.type
      };
      
      setMessages(prev => [...prev, aiMessage]);
      setIsTyping(false);
    }, 1000 + Math.random() * 500);
  };

  const handleQuickQuestion = (question: string) => {
    handleSendMessage(question);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  // Scroll to bottom on new messages
  React.useEffect(() => {
    const timer = setTimeout(() => {
      if (messagesEndRef.current) {
        messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });
      }
    }, 100);
    return () => clearTimeout(timer);
  }, [messages]);

  const generateAIResponse = (userMessage: string) => {
    const message = userMessage.toLowerCase();
    
    if (message.includes('portfolio') || message.includes('overview')) {
      return {
        content: "ðŸŽ¨ **Portfolio Overview**\n\nMy portfolio showcases expertise in:\n\n**Featured Projects:**\nâ€¢ Bank of America Bill Payment - Enhanced UX for 68M+ users\nâ€¢ CYNC Loan Origination System - B2B workflow optimization\nâ€¢ AI Chat Interface - Conversational UX design\n\n**Key Skills:**\nâ€¢ UI/UX Design\nâ€¢ Frontend Development\nâ€¢ Design Systems\nâ€¢ Accessibility (WCAG 2.1)\n\n**Impact Metrics:**\nâ€¢ 40-60% improvement in user efficiency\nâ€¢ 35-45% increase in satisfaction\nâ€¢ Full accessibility compliance\n\nWould you like to explore any specific project or area?",
        hasActions: true,
        type: 'overview'
      };
    }

    if (message.includes('experience') || message.includes('background')) {
      return {
        content: "ðŸ’¼ **Professional Experience**\n\n**Current Role:**\nâ€¢ Lead UI/UX Designer\nâ€¢ Focus on enterprise SaaS products\nâ€¢ Team leadership and mentoring\n\n**Key Achievements:**\nâ€¢ Led redesign of major banking platform\nâ€¢ Implemented enterprise-wide design system\nâ€¢ Reduced user error rates by 45%\n\n**Skills & Tools:**\nâ€¢ Design: Figma, Adobe XD\nâ€¢ Development: React, TypeScript\nâ€¢ Methods: User-Centered Design, Agile\n\nWould you like more details about specific experiences?",
        hasActions: true,
        type: 'experience'
      };
    }

    if (message.includes('skills') || message.includes('technologies')) {
      return {
        content: "ðŸ›  **Technical Skills**\n\n**Design:**\nâ€¢ Figma & Adobe Creative Suite\nâ€¢ User Research & Testing\nâ€¢ Interaction Design\nâ€¢ Design Systems\n\n**Development:**\nâ€¢ React & TypeScript\nâ€¢ Next.js & Tailwind\nâ€¢ Git & Version Control\nâ€¢ API Integration\n\n**Methodologies:**\nâ€¢ Agile & Scrum\nâ€¢ User-Centered Design\nâ€¢ Design Thinking\nâ€¢ A/B Testing\n\nWould you like to see examples of any of these skills in action?",
        hasActions: true,
        type: 'skills'
      };
    }

    // Default response
    return {
      content: "I can help you explore:\n\nâ€¢ Portfolio Projects\nâ€¢ Professional Experience\nâ€¢ Technical Skills\nâ€¢ Design Process\nâ€¢ Contact Information\n\nWhat would you like to learn more about?",
      hasActions: true,
      type: 'general'
    };
  };

  return (
    <div className="relative">
      <Button
        onClick={() => setIsOpen(true)}
        className={`fixed bottom-6 right-6 w-16 h-16 rounded-full shadow-xl z-40 transition-all duration-300 bg-gradient-to-r from-portfolio-accent to-blue-600 hover:shadow-2xl hover:scale-110 ${
          isOpen ? 'scale-0' : 'scale-100'
        }`}
        size="sm"
      >
        <div className="relative">
          <MessageCircle className="w-7 h-7" />
          <Sparkles className="w-3 h-3 absolute -top-1 -right-1 text-yellow-300" />
        </div>
      </Button>

      <div
        className={`fixed ${
          isExpanded 
            ? 'inset-4' 
            : 'bottom-6 right-6 w-[420px] h-[600px]'
        } bg-white dark:bg-gray-800 rounded-xl shadow-2xl z-50 transition-all duration-300 border border-gray-200 dark:border-gray-700 ${
          isOpen ? 'scale-100 opacity-100' : 'scale-0 opacity-0'
        }`}
      >
        <Card className="h-full flex flex-col overflow-hidden">
          <CardHeader className="flex flex-row items-center justify-between p-4 bg-gradient-to-r from-portfolio-accent to-blue-600 text-white rounded-t-xl flex-shrink-0">
            <div className="flex items-center gap-3">
              <div className="relative">
                <Bot className="w-6 h-6" />
                <div className="absolute -top-1 -right-1 w-3 h-3 bg-green-400 rounded-full border-2 border-white"></div>
              </div>
              <div>
                <span className="font-semibold text-lg">Portfolio Assistant</span>
                <div className="flex items-center gap-2 text-sm opacity-90">
                  <Badge variant="secondary" className="text-xs bg-white/20 text-white border-white/30">
                    <Sparkles className="w-3 h-3 mr-1" />
                    AI Enhanced
                  </Badge>
                  <span className="text-xs">Online</span>
                </div>
              </div>
            </div>
            <div className="flex items-center gap-2">
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setIsExpanded(!isExpanded)}
                className="text-white hover:bg-white/20 w-8 h-8 p-0"
              >
                {isExpanded ? <Minimize className="w-4 h-4" /> : <Expand className="w-4 h-4" />}
              </Button>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setIsOpen(false)}
                className="text-white hover:bg-white/20 w-8 h-8 p-0"
              >
                <X className="w-4 h-4" />
              </Button>
            </div>
          </CardHeader>

          <CardContent className="flex-1 flex flex-col p-0 overflow-hidden min-h-0">
            <ScrollArea className="flex-1 min-h-0" ref={scrollAreaRef}>
              <div className="p-4 space-y-4">
                {messages.length === 1 && (
                  <>
                    <div className="text-center mb-6">
                      <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
                        <Bot className="w-8 h-8 text-blue-600" />
                      </div>
                      <h3 className="text-xl font-semibold mb-2">Meet Portfolio Assistant</h3>
                      <p className="text-gray-600">I can help you with portfolio templates and answer questions about portfolio. How can I assist you today?</p>
                    </div>

                    <div className="max-w-2xl mx-auto space-y-4">
                      <p className="text-sm text-gray-600 pl-2">ðŸ’¡ Try asking:</p>
                      <div className="grid gap-2">
                    <Button
                      variant="outline"
                      className="justify-start h-auto py-3 px-4 text-left hover:bg-blue-50/80 hover:border-blue-200 transition-colors"
                      onClick={() => handleQuickQuestion("Give me a portfolio overview")}
                    >
                      <div className="flex items-center gap-3">
                        <Palette className="w-4 h-4" />
                        <span className="text-sm font-medium">Portfolio Overview</span>
                      </div>
                    </Button>
                    <Button
                      variant="outline"
                      className="justify-start h-auto py-3 px-4 text-left hover:bg-blue-50/80 hover:border-blue-200 transition-colors"
                      onClick={() => handleQuickQuestion("Tell me about your experience and background")}
                    >
                      <div className="flex items-center gap-3">
                        <BookOpen className="w-4 h-4" />
                        <span className="text-sm font-medium">Experience Deep Dive</span>
                      </div>
                    </Button>
                    <Button
                      variant="outline"
                      className="justify-start h-auto py-3 px-4 text-left hover:bg-blue-50/80 hover:border-blue-200 transition-colors"
                      onClick={() => handleQuickQuestion("What technical skills and technologies do you use?")}
                    >
                      <div className="flex items-center gap-3">
                        <Code className="w-4 h-4" />
                        <span className="text-sm font-medium">Technical Skills</span>
                      </div>
                    </Button>
                    <Button
                      variant="outline"
                      className="justify-start h-auto py-3 px-4 text-left hover:bg-blue-50/80 hover:border-blue-200 transition-colors"
                      onClick={() => handleQuickQuestion("Tell me about your design process and methodologies")}
                    >
                      <div className="flex items-center gap-3">
                        <Brain className="w-4 h-4" />
                        <span className="text-sm font-medium">Design Process</span>
                      </div>
                    </Button>
                  </div>
                </div>
              </div>
            </ScrollArea>

            {messages.map((message) => (
              <div
                key={message.id}
                className={`flex gap-3 mb-4 ${message.sender === 'ai' ? 'items-start' : 'items-start flex-row-reverse'}`}
              >
                <div className={`flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center ${
                  message.sender === 'ai' ? 'bg-blue-100' : 'bg-green-100'
                }`}>
                  {message.sender === 'ai' ? (
                    <Bot className="w-5 h-5 text-blue-600" />
                  ) : (
                    <User className="w-5 h-5 text-green-600" />
                  )}
                </div>
                <div
                  className={`flex-1 max-w-[80%] p-4 rounded-lg ${
                    message.sender === 'ai'
                      ? 'bg-white border border-gray-200'
                      : 'bg-blue-600 text-white'
                  }`}
                >
                  <div className="prose prose-sm dark:prose-invert max-w-none">
                    {message.content}
                  </div>
                  {message.hasActions && message.sender === 'ai' && (
                    <div className="mt-3 flex flex-wrap gap-2">
                      {message.type === 'overview' && (
                        <>
                          <Button size="sm" variant="secondary" onClick={() => handleQuickQuestion("Tell me more about your Bank of America project")}>
                            Bank of America Project
                          </Button>
                          <Button size="sm" variant="secondary" onClick={() => handleQuickQuestion("Tell me about your CYNC project")}>
                            CYNC Project
                          </Button>
                        </>
                      )}
                      {message.type === 'skills' && (
                        <>
                          <Button size="sm" variant="secondary" onClick={() => handleQuickQuestion("Show me your React projects")}>
                            React Projects
                          </Button>
                          <Button size="sm" variant="secondary" onClick={() => handleQuickQuestion("Design System Examples")}>
                            Design Systems
                          </Button>
                        </>
                      )}
                    </div>
                  )}
                </div>
              </div>
            ))}
            <div ref={messagesEndRef} />
            
            <div className="p-4 border-t bg-white dark:bg-gray-800 flex-shrink-0">
              <div className="flex gap-2">
                <Input
                  value={inputValue}
                  onChange={(e) => setInputValue(e.target.value)}
                  onKeyDown={handleKeyPress}
                  onKeyPress={handleKeyPress}
                  placeholder="Ask me about the portfolio..."
                  className="flex-1"
                  disabled={isTyping}
                />
                <Button
                  onClick={() => handleSendMessage()}
                  disabled={!inputValue.trim() || isTyping}
                  size="sm"
                  className="bg-gradient-to-r from-portfolio-accent to-blue-600 hover:shadow-lg"
                >
                  <Send className="w-4 h-4" />
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}